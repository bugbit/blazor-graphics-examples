@implements IDisposable

<div class="d-flex flex-column min-vh-100 justify-content-center align-items-center">
    @if (isLoading)
    {
        <div>
            <h2>Loading @App?.Name</h2>
            <div class="progress mt-2" style="height: 2em;">
                <div id="progressbar" class="progress-bar progress-bar-striped progress-bar-animated"
                style="width: @(PercentLoaded)%; background-color: #204066;"></div>
            </div>
            <div>
                <span id="progressLabel" class="text-muted">@messageProgress</span>
            </div>
        </div>
    }
</div>

@code
{
    [Parameter]
    public GRApp? App { get; set; }

    [Parameter]
    public int PercentLoaded { get; set; } = 0;

    [Parameter]
    public EventCallback OnLoadedAssets { get; set; }

    private bool isLoading = true;
    private string messageProgress = "Init ...";
    private Progress<int>? progressSetPercentLoaded;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        progressSetPercentLoaded = new Progress<int>(SetPercentLoaded);
        App?.Initialize();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (App != null)
                await App.LoadAssets(progressSetPercentLoaded);
            await OnLoadedAssets.InvokeAsync();
        }
    }

    private void SetPercentLoaded(int percentLoaded)
    {
        PercentLoaded = percentLoaded;
        StateHasChanged();
    }

    public void Dispose()
    {
        App?.Dispose();
    }
}
